# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool: default

stages:
  
- stage : Build
  variables:
    environment: QA
  jobs:    
  - job: 'Build_Stage_Job1'    
    displayName: 'Env $(environment)'
    steps:
    - script: echo "stage1, job1, step1  For App $(appname) for Env $(environment)"
    - script: echo "stage1, job1, step2"
  - job: 'Build_Stage_Job2'    
    steps:    
    - script: echo "stage1, job2, step1"
    - script: echo "stage1, job2, step2"

- stage : Test
  dependsOn: Build
  jobs:
  - job: 'Test_Stage_Job1'
    steps:
    - script: echo "stage Test, job1, step1"    


- stage : UAT
  dependsOn: Build
  jobs:
  - job: 'UAT_Stage_Job1'
    steps:
    - script: echo   Agent.BuildDirectory	$(Agent.BuildDirectory)
    - script: echo   Agent.ContainerMapping	$(Agent.ContainerMapping)
    - script: echo   Agent.HomeDirectory    	$(Agent.HomeDirectory)    
    - script: echo   Agent.Id	$(Agent.Id)
    - script: echo   Agent.JobName	$(Agent.JobName)
    - script: echo   Agent.JobStatus	$(Agent.JobStatus)
    - script: echo   Agent.MachineName	$(Agent.MachineName)
    - script: echo   Agent.Name	$(Agent.Name)
    - script: echo   Agent.ToolsDirectory	$(Agent.ToolsDirectory)
    - script: echo   Agent.WorkFolder	$(Agent.WorkFolder)
    - script: echo   Build.ArtifactStagingDirectory	$(Build.ArtifactStagingDirectory)
    - script: echo   Build.BuildId	$(Build.BuildId)
    - script: echo   Build.BuildNumber	$(Build.BuildNumber)
    - script: echo   Build.BuildUri	$(Build.BuildUri)
    - script: echo   Build.BinariesDirectory	$(Build.BinariesDirectory)
    - script: echo   Build.ContainerId	$(Build.ContainerId)
    - script: echo   Build.DefinitionName	$(Build.DefinitionName)
    - script: echo   Build.DefinitionVersion	$(Build.DefinitionVersion)
    - script: echo   Build.QueuedBy	$(Build.QueuedBy)
    - script: echo   Build.QueuedById	$(Build.QueuedById)
    - script: echo   Build.Reason	$(Build.Reason)
    - script: echo   Build.Repository.Clean	$(Build.Repository.Clean)
    - script: echo   Build.Repository.LocalPath	$(Build.Repository.LocalPath)
    - script: echo   Build.Repository.ID	$(Build.Repository.ID)
    - script: echo   Build.Repository.Name	$(Build.Repository.Name)
    - script: echo   Build.Repository.Provider	$(Build.Repository.Provider)
    - script: echo   Build.Repository.Tfvc.Workspace	$(Build.Repository.Tfvc.Workspace)
    - script: echo   Build.Repository.Uri	$(Build.Repository.Uri)
    - script: echo   Build.RequestedFor	$(Build.RequestedFor)
    - script: echo   Build.RequestedForEmail	$(Build.RequestedForEmail)
    - script: echo   Build.RequestedForId	$(Build.RequestedForId)
    - script: echo   Build.SourceBranch	$(Build.SourceBranch)
    - script: echo   Build.SourceBranchName	$(Build.SourceBranchName)
    - script: echo   Build.SourcesDirectory	$(Build.SourcesDirectory)
    - script: echo   Build.SourceVersion	$(Build.SourceVersion)
    - script: echo   Build.SourceVersionMessage	$(Build.SourceVersionMessage)
    - script: echo   Build.StagingDirectory	$(Build.StagingDirectory)

    - script: echo   Build.Repository.Git.SubmoduleCheckout	$(Build.Repository.Git.SubmoduleCheckout)
    - script: echo   Build.SourceTfvcShelveset	$(Build.SourceTfvcShelveset)
    - script: echo   Build.TriggeredBy.BuildId	$(Build.TriggeredBy.BuildId)
    - script: echo   Build.TriggeredBy.DefinitionId	$(Build.TriggeredBy.DefinitionId)
    - script: echo   Build.TriggeredBy.DefinitionName	$(Build.TriggeredBy.DefinitionName)
    - script: echo   Build.TriggeredBy.BuildNumber	$(Build.TriggeredBy.BuildNumber)
    - script: echo   Build.TriggeredBy.ProjectID	$(Build.TriggeredBy.ProjectID)
    - script: echo   Common.TestResultsDirectory	$(Common.TestResultsDirectory)

    - script: echo   Environment.Name	$(Environment.Name)
    - script: echo   Environment.Id	$(Environment.Id)
    - script: echo   Environment.ResourceName	$(Environment.ResourceName)
    - script: echo   Environment.ResourceId	$(Environment.ResourceId)
    - script: echo   Strategy.Name	$(Strategy.Name)
    - script: echo   Strategy.CycleName	$(Strategy.CycleName)

    - script: echo   System.AccessToken 	$(System.AccessToken )

    - script: echo   System.CollectionId	$(System.CollectionId)
    - script: echo   System.CollectionUri	$(System.CollectionUri)
    - script: echo   System.DefaultWorkingDirectory	$(System.DefaultWorkingDirectory)
    - script: echo   System.DefinitionId	$(System.DefinitionId)
    - script: echo   System.HostType	$(System.HostType)
    - script: echo   System.JobAttempt	$(System.JobAttempt)
    - script: echo   System.JobDisplayName	$(System.JobDisplayName)
    - script: echo   System.JobId	$(System.JobId)
    - script: echo   System.JobName	$(System.JobName)
    - script: echo   System.PhaseAttempt	$(System.PhaseAttempt)

    - script: echo   System.PhaseDisplayName	$(System.PhaseDisplayName)
    - script: echo   System.PhaseName	$(System.PhaseName)
    - script: echo   System.PlanId	$(System.PlanId)
    - script: echo   System.PullRequest.IsFork	$(System.PullRequest.IsFork)
    - script: echo   System.PullRequest.PullRequestId	$(System.PullRequest.PullRequestId)
    - script: echo   System.PullRequest.PullRequestNumber	$(System.PullRequest.PullRequestNumber)
    - script: echo   System.PullRequest.SourceBranch	$(System.PullRequest.SourceBranch)
    - script: echo   System.PullRequest.SourceRepositoryURI	$(System.PullRequest.SourceRepositoryURI)
    - script: echo   System.PullRequest.TargetBranch	$(System.PullRequest.TargetBranch)
    - script: echo   System.StageAttempt	$(System.StageAttempt)
    - script: echo   System.StageDisplayName	$(System.StageDisplayName)
    - script: echo   System.StageName	$(System.StageName)
    - script: echo   System.TeamFoundationCollectionUri	$(System.TeamFoundationCollectionUri)

    - script: echo   System.TeamProject	$(System.TeamProject)
    - script: echo   System.TeamProjectId	$(System.TeamProjectId)
    - script: echo   System.TimelineId   	$(System.TimelineId)   